{"version":3,"sources":["atoms.js","Home.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["socket","atom","key","default","io","Home","connectedSocket","useRecoilValue","history","useHistory","useState","name","setName","room","setRoom","numOfUsers","setNumOfUsers","loading","setLoading","useEffect","console","log","on","info","push","emit","className","placeholder","value","onChange","e","target","onClick","Game","number","setNumber","firstNumber","setFirstNumber","secondNumber","setSecondNumber","score","setScore","loser","setLoser","winner","setWinner","roundWon","setRoundWon","won","setWon","lost","setLost","game","setGame","setTimeout","decrement","num","window","location","disabled","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAGaA,EAASC,YAAK,CACvBC,IAAK,SACLC,QAASC,IAAG,2B,cC+EDC,EA7EF,WAIX,IAAMC,EAAkBC,YAAeP,GAEjCQ,EAAUC,cAEhB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,QAAQC,IAAIf,KACX,CAACA,IAEJa,qBAAU,WAERb,EAAgBgB,GAAG,cAAc,SAACC,GAC9BH,QAAQC,IAAIE,QAGjB,IAyBD,OAlBAJ,qBAAU,WACRb,EAAgBgB,GAAG,cAAc,SAACC,GAChCP,EAAcO,MAEM,IAAfR,GAECP,EAAQgB,KAAR,gBAAsBX,IAI1BP,EAAgBmB,KAAK,kBAExB,CAACV,IAQF,sBAAKW,UAAY,OAAjB,UACE,4CACA,8BACE,uBACEC,YAAc,aACdC,MAASjB,EACTkB,SAAY,SAACC,GAAD,OAAOlB,EAAQkB,EAAEC,OAAOH,YAGxC,8BACE,uBACED,YAAc,aACdC,MAASf,EACTgB,SAAY,SAACC,GAAD,OAAOhB,EAAQgB,EAAEC,OAAOH,YAGxC,8BACE,wBAAQI,QA1CG,WACbd,EAAW,8BACbZ,EAAgBmB,KAAK,OAAQ,CAACd,OAAME,UAwChC,qBAGF,8BACKI,Q,QCuEIgB,G,MA/IF,WAET,MAA4BvB,mBAAS,aAArC,mBAAOwB,EAAP,KAAeC,EAAf,KACA,EAAsCzB,mBAAS,GAA/C,mBAAO0B,EAAP,KAAoBC,EAApB,KACA,EAAwC3B,mBAAS,GAAjD,mBAAO4B,EAAP,KAAqBC,EAArB,KACA,EAAwB7B,mBAAS,GAAjC,mBAAK8B,EAAL,KAAYC,EAAZ,KAEA,EAAoC/B,mBAAS,GAA7C,mBACA,GADA,UAC0BA,oBAAS,IAAnC,mBAAOgC,EAAP,KAAcC,EAAd,KACA,EAA4BjC,oBAAS,GAArC,mBAAOkC,EAAP,KAAeC,EAAf,KACA,EAAkCnC,oBAAS,GAA3C,mBACA,GADA,UACgCA,oBAAS,IAAzC,mBAAOoC,EAAP,KAAiBC,EAAjB,KACA,EAAsBrC,oBAAS,GAA/B,mBAAOsC,EAAP,KAAYC,EAAZ,KACA,EAAwBvC,oBAAS,GAAjC,mBAAOwC,EAAP,KAAaC,EAAb,KACA,EAAwBzC,oBAAS,GAAjC,mBAAO0C,EAAP,KAAaC,EAAb,KAIM/C,GAFUG,cAEQF,YAAeP,IAEvCmB,qBAAU,WACY,IAAXe,GACKd,QAAQC,IAAI,OACZf,EAAgBmB,KAAK,YACrBgB,EAASD,EAAQ,GACjBlC,EAAgBmB,KAAK,QAASe,GAK9BO,GAAY,IAGXb,EAAS,IAEdd,QAAQC,IAAI,QACRf,EAAgBmB,KAAK,WAKlC,CAACS,EAAQ5B,IAGZA,EAAgBgB,GAAG,SAAS,SAACM,GACzBe,EAASf,GAET0B,YAAW,WACPX,GAAS,KACV,KACHvB,QAAQC,IAAI,QAAQqB,MAExBpC,EAAgBgB,GAAG,UAAU,SAACM,GAC1BiB,EAAUjB,GACV0B,YAAW,WACPT,GAAU,KACX,KACHzB,QAAQC,IAAI,SAASuB,MAGzBzB,qBAAU,WAENb,EAAgBgB,GAAG,OAAO,SAACM,GACvByB,GAAQ,GACRJ,EAAOrB,GACPiB,EAAUjB,GACVe,GAAUf,MAGdtB,EAAgBgB,GAAG,QAAQ,SAACM,GACxByB,GAAQ,GACRF,EAAQvB,GACRiB,GAAWjB,GACXe,EAASf,QAGd,IAMHR,QAAQC,IAAImB,GAIZrB,qBAAU,WAIFb,EAAgBgB,GAAG,gBAAgB,SAACC,GAChCH,QAAQC,IAAIE,GACZY,EAAUZ,EAAK,IACfc,EAAed,EAAK,IACpBgB,EAAgBhB,EAAK,SAI9B,IAKH,IAAMgC,EAAY,SAACC,GACfrB,EAAUD,EAASsB,IAGvB,OAEI,sBAAK9B,UAAY,OAAjB,UAGKwB,GAAQ,gCAAK,0CAAiB,wBAAQlB,QAAW,WAAOyB,OAAOC,SAAW,KAA5C,4BAC9BV,GAAO,gCAAK,yCAAgB,wBAAQhB,QAAW,WAAOyB,OAAOC,SAAW,KAA5C,4BAI5Bd,GAAU,wCACVF,GAAS,uCAETI,GAAY,6CAEVF,IAAWF,GAASU,GACvB,qCACQ,6BAAKlB,IAET,gCACI,yBAAQR,UAAY,cAAciC,SAAYf,EAAQZ,QAAW,kBAAMuB,EAAUnB,IAAjF,cAAiGA,KACjG,yBAAQV,UAAY,cAAcM,QAAW,kBAAMuB,EAAUjB,IAA7D,cAA8EA,KAC9E,wBAAQZ,UAAY,cAAcM,QAAW,kBAAMuB,EAAU,IAA7D,UAAmE,eClHxEK,EAfH,WACV,OACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAApB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAO,YAApB,SACE,cAAC,EAAD,YCFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACA,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da47ced6.chunk.js","sourcesContent":["import {atom} from 'recoil'\nimport io from 'socket.io-client'\n\nexport const socket = atom({\n    key: 'socket',\n    default: io('http://localhost:4000')\n})","import React, { useEffect, useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport {socket} from './atoms'\nimport { useHistory } from 'react-router-dom'\n\n// http://192.168.0.221:3000\n\nconst Home = () => {\n\n  \n\n  const connectedSocket = useRecoilValue(socket)\n\n  const history = useHistory()\n\n  const [name, setName] = useState('')\n  const [room, setRoom] = useState('')\n  const [numOfUsers, setNumOfUsers] = useState(0)\n  const [loading, setLoading] = useState('')\n\n  useEffect(() => {\n    console.log(connectedSocket)\n  }, [connectedSocket])\n\n  useEffect(() => {\n\n    connectedSocket.on('numOfUsers', (info) => {\n        console.log(info)\n    })\n\n}, [])\n\n  const joinGame = () => {\n      setLoading('Waiting for other users...')\n    connectedSocket.emit('join', {name, room})\n  }\n\n  useEffect(() => {\n    connectedSocket.on('numOfUsers', (info) => {\n      setNumOfUsers(info)\n    })\n        if(numOfUsers === 2) {\n            \n            history.push(`/game/${room}`)\n        }\n        \n\n        connectedSocket.emit('randomNumber')\n    \n  }, [numOfUsers])\n\n  \n\n\n\n  return (\n\n    <div className = 'home'>\n      <h1>Enter Game</h1>\n      <div>\n        <input\n          placeholder = \"Enter name\"\n          value = {name}\n          onChange = {(e) => setName(e.target.value)}\n        />\n      </div>\n      <div>\n        <input\n          placeholder = \"Enter room\"\n          value = {room}\n          onChange = {(e) => setRoom(e.target.value)}\n        />\n      </div>\n      <div>\n        <button onClick = {joinGame}>Start</button>\n      </div>\n\n      <div>\n          {loading}\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React, { useEffect, useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { socket } from './atoms'\nimport './styles.css'\nimport {useHistory} from 'react-router-dom'\n\nconst Game = () => {\n\n    const [number, setNumber] = useState('Get Ready')\n    const [firstNumber, setFirstNumber] = useState(0)\n    const [secondNumber, setSecondNumber] = useState(0)\n    let [score, setScore] = useState(0)\n\n    const [numOfUsers, setNumOfUsers] = useState(0)\n    const [loser, setLoser] = useState(false)\n    const [winner, setWinner] = useState(false)\n    const [roundLost, setRoundLost] = useState(false)\n    const [roundWon, setRoundWon] = useState(false)\n    const [won, setWon] = useState(false)\n    const [lost, setLost] = useState(false)\n    const [game, setGame] = useState(true)\n\n    const history = useHistory()\n\n    const connectedSocket = useRecoilValue(socket)\n\n    useEffect(() => {\n            if(number === 0) {\n                    console.log('win')\n                    connectedSocket.emit('userWins')\n                    setScore(score + 1)\n                    connectedSocket.emit('score', score)\n\n         \n                       \n\n                    setRoundWon(false)\n                   \n            }\n            else if (number < 0) {\n\n                console.log('lost')\n                    connectedSocket.emit('lost')\n\n                    \n\n            }\n    }, [number, connectedSocket])\n    \n\n    connectedSocket.on('loser', (value) => {\n        setLoser(value)\n\n        setTimeout(() => {\n            setLoser(false)\n        }, 1000)\n        console.log('loser',loser)\n    })\n    connectedSocket.on('winner', (value) => {\n        setWinner(value)\n        setTimeout(() => {\n            setWinner(false)\n        }, 1000)\n        console.log('winner',winner)\n    })\n\n    useEffect(() => {\n\n        connectedSocket.on('won', (value) => {\n            setGame(false)\n            setWon(value)\n            setWinner(value)\n            setLoser(!value)\n            \n        })\n        connectedSocket.on('lost', (value) => {\n            setGame(false)\n            setLost(value)\n            setWinner(!value)\n            setLoser(value)\n        })\n\n    }, [])\n\n    \n\n\n   \n    console.log(score)\n\n   \n\n    useEffect(() => {\n\n        \n\n            connectedSocket.on('generatedNum', (info) => {\n                console.log(info)\n                setNumber(info[0])\n                setFirstNumber(info[1])\n                setSecondNumber(info[2])\n            })\n\n           \n    }, [])\n\n\n   \n\n    const decrement = (num) => {\n        setNumber(number - num)\n    }\n\n    return (\n        \n        <div className = 'game'>\n\n\n            {lost && <div><h1>You lost</h1><button onClick = {() => {window.location = '/'}}>Return Home</button></div>}\n            {won && <div><h1>You won</h1><button onClick = {() => {window.location = '/'}}>Return Home</button></div>}\n\n\n\n            {winner && <h1>Winner</h1>}\n            {loser && <h1>Loser</h1>}\n\n            {roundWon && <h1>Round Won!</h1>}\n\n            {(!winner && !loser && game) &&\n            <>\n                    <h1>{number}</h1>\n                \n                <div>\n                    <button className = 'game_button' disabled = {winner} onClick = {() => decrement(firstNumber)}>-{firstNumber}</button>\n                    <button className = 'game_button' onClick = {() => decrement(secondNumber)}>-{secondNumber}</button>\n                    <button className = 'game_button' onClick = {() => decrement(1)}>{-1}</button>\n                </div>\n            </>\n                }\n\n\n                \n\n            \n            \n        </div>\n    )\n}\n\nexport default Game\n","import React from 'react'\nimport Home from './Home'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Game from './Game'\n\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Route exact path = '/'>\n          <Home/>\n        </Route>\n        <Route exact path = '/game/:id'>\n          <Game/>\n        </Route>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}